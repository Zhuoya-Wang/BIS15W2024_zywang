# Count the occurrences of each type combination per generation
type_distribution <- pokemon_types %>%
group_by(generation, type_combined) %>%
summarise(count = n(), .groups = 'drop')
# Plot the distribution of types across generations
ggplot(type_distribution, aes(x = factor(generation), y = count, fill = type_combined)) +
geom_bar(stat = "identity", position = "stack") +
scale_fill_viridis_d() + # This uses a color scale from the viridis package; install if necessary
labs(title = "Distribution of Pokémon Types Across Generations",
x = "Generation",
y = "Count",
fill = "Type Combination") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library("tidyverse")
library("janitor")
library("naniar")
library("dplyr")
pokemon <- read.csv("~/Desktop/GitHub/BIS15W2024_zywang/BIS12W2024_Group16(Zhuoya Wang&Tianyu Lin)/pokemon.csv")
glimpse(pokemon)
glimpse(pokemon)
glimpse(pokemon)
glimpse(pokemon)
summary(pokemon)
pokemon <- pokemon %>%
mutate_all(~ifelse(. == "", NA, .))
pokemon %>% naniar::miss_var_summary()
pokemon <- pokemon %>%
mutate_all(~ifelse(type2 == "", None, .))
library("tidyverse")
library("janitor")
library("naniar")
library("dplyr")
pokemon <- read.csv("~/Desktop/GitHub/BIS15W2024_zywang/BIS12W2024_Group16(Zhuoya Wang&Tianyu Lin)/pokemon.csv")
glimpse(pokemon)
summary(pokemon)
View(pokemon)
pokemon <- pokemon %>%
mutate_all(~ifelse(type2 == "", None, .))
pokemon <- pokemon %>%
mutate_all(~ifelse(type2 == "", 'None', .))
pokemon <- pokemon %>%
mutate_all(~ifelse(type2 == "", 'None', .));pokemon
View(pokemon)
library("tidyverse")
library("janitor")
library("naniar")
library("dplyr")
pokemon <- read.csv("~/Desktop/GitHub/BIS15W2024_zywang/BIS12W2024_Group16(Zhuoya Wang&Tianyu Lin)/pokemon.csv")
glimpse(pokemon)
summary(pokemon)
pokemon <- read.csv("~/Desktop/GitHub/BIS15W2024_zywang/BIS12W2024_Group16(Zhuoya Wang&Tianyu Lin)/pokemon.csv")
View(pokemon)
library("tidyverse")
library("janitor")
library("naniar")
library("dplyr")
pokemon <- read.csv("~/Desktop/GitHub/BIS15W2024_zywang/BIS12W2024_Group16(Zhuoya Wang&Tianyu Lin)/pokemon.csv")
glimpse(pokemon)
summary(pokemon)
pokemon$type2 <- gsub(" ", "none", pokemon$type2)
View(pokemon)
pokemon %>% naniar::miss_var_summary()
View(pokemon)
pokemon <- pokemon %>%
mutate_all(~ifelse( .== "", 'NA', .))
View(pokemon)
pokemon <- pokemon %>%
mutate_all(~ifelse( .== "", NA, .))
library("tidyverse")
library("janitor")
library("naniar")
library("dplyr")
pokemon <- read.csv("~/Desktop/GitHub/BIS15W2024_zywang/BIS12W2024_Group16(Zhuoya Wang&Tianyu Lin)/pokemon.csv")
glimpse(pokemon)
summary(pokemon)
pokemon %>% naniar::miss_var_summary()
pokemon <- pokemon %>%
mutate_all(~ifelse( .== "", NA, .))
pokemon <- pokemon %>%
mutate_all(~ifelse( .== "", NA, .))%>%
mutate(type2 = replace_na(type2, 'none'))
View(pokemon)
pokemon_per_gen <- table(pokemon$generation)
# Plot
bar_plot <- ggplot(data = as.data.frame(pokemon_per_gen), aes(x = Var1, y = Freq)) +
geom_bar(stat = "identity", fill = "lightskyblue") +
labs(x = "Generation", y = "Number of Pokémon", title = "Pokémon Introduced per Generation") +
theme_minimal()
pokemon_per_gen
pokemon_per_gen <- table(pokemon$generation)
# Plot
bar_plot <- ggplot(data = as.data.frame(pokemon_per_gen), aes(x = Var1, y = Freq)) + geom_bar(stat = "identity", fill = "lightskyblue") +
labs(x = "Generation", y = "Number of Pokémon", title = "Pokémon Introduced per Generation") +
theme_minimal()
# Plot
ggplot(data = as.data.frame(pokemon_per_gen), aes(x = Var1, y = Freq)) + geom_bar(stat = "identity", fill = "lightskyblue") +
labs(x = "Generation", y = "Number of Pokémon", title = "Pokémon Introduced per Generation") +
theme_minimal()
# Plot
ggplot(data = as.data.frame(pokemon_per_gen), aes(x = Var1, y = Freq)) + geom_bar(stat = "identity", fill = "lightskyblue") +
labs(x = "Generation", y = "Number of Pokémon", title = "Pokémon Introduced per Generation") +
coord_flip()+
theme_light()
# Plot
ggplot(data = as.data.frame(pokemon_per_gen), aes(x = reorder(Var1, Freq), y = Freq)) + geom_bar(stat = "identity", fill = "lightskyblue") +
labs(x = "Generation", y = "Number of Pokémon", title = "Pokémon Introduced per Generation") +
coord_flip()+
theme_light()
# Count primary types per generation
type_per_gen <- aggregate(cbind(type1) ~ generation, data = pokemon, FUN = function(x) length(unique(x)));type_per_gen
# Plot
ggplot(data = type_per_gen, aes(x = generation, y = type1)) +
geom_line() +
geom_point() +
labs(x = "Generation", y = "Unique Primary Types", title = "Diversity of Primary Pokémon Types per Generation") +
theme_minimal()
# Count primary types per generation
type_per_gen <- aggregate(cbind(type1) ~ generation, data = pokemon, FUN = function(x) length(unique(x)));type_per_gen
# Plot
ggplot(data = type_per_gen, aes(x = generation, y = type1)) +
geom_line() +
geom_point() +
labs(x = "Generation", y = "Unique Primary Types", title = "Diversity of Primary Pokémon Types per Generation") +
theme_light()
# Count primary types per generation
type_per_gen <- aggregate(cbind(type1) ~ generation, data = pokemon, FUN = function(x) length(unique(x)));type_per_gen
# Plot
ggplot(data = type_per_gen, aes(x = as.factor(generation), y = type1)) +
geom_line() +
geom_point() +
labs(x = "Generation", y = "Unique Primary Types", title = "Diversity of Primary Pokémon Types per Generation") +
theme_light()
# Count primary types per generation
type_per_gen <- aggregate(cbind(type1) ~ generation, data = pokemon, FUN = function(x) length(unique(x)));type_per_gen
# Plot
ggplot(data = type_per_gen, aes(x = as.numeric(generation), y = type1)) +
geom_line() +
geom_point() +
labs(x = "Generation", y = "Unique Primary Types", title = "Diversity of Primary Pokémon Types per Generation") +
theme_light()
# Count primary types per generation
type_per_gen <- aggregate(cbind(type1) ~ generation, data = pokemon, FUN = function(x) length(unique(x)));type_per_gen
# Plot
ggplot(data = type_per_gen, aes(x = as.factor(generation), y = type1)) +
geom_bar() +
labs(x = "Generation", y = "Unique Primary Types", title = "Diversity of Primary Pokémon Types per Generation") +
theme_light()
# Count primary types per generation
type_per_gen <- aggregate(cbind(type1) ~ generation, data = pokemon, FUN = function(x) length(unique(x)));type_per_gen
# Plot
ggplot(data = type_per_gen, aes(x = as.factor(generation), y = type1)) +
geom_bar(stat = "identity", fill = "lightskyblue") +
labs(x = "Generation", y = "Unique Primary Types", title = "Diversity of Primary Pokémon Types per Generation") +
theme_light()
# Count primary types per generation
type_per_gen <- aggregate(cbind(type1) ~ generation, data = pokemon, FUN = function(x) length(unique(x)));type_per_gen
# Plot
ggplot(data = type_per_gen, aes(x = as.numeric(generation), y = type1)) +
geom_line() +
geom_point() +
labs(x = "Generation", y = "Unique Primary Types", title = "Diversity of Primary Pokémon Types per Generation") +
theme_light()
pokemon_per_gen <- table(pokemon$generation)
pokemon_per_gen <- table(pokemon$generation);pokemon_per_gen
# Count primary types per generation
type_per_gen <- aggregate(cbind(type2) ~ generation, data = pokemon, FUN = function(x) length(unique(x)));type_per_gen
# Plot
ggplot(data = type_per_gen, aes(x = as.numeric(generation), y = type2)) +
geom_line() +
geom_point() +
labs(x = "Generation", y = "Unique Secondary Types", title = "Diversity of Primary Pokémon Types per Generation") +
theme_light()
# Count primary types per generation
type_per_gen <-
pokemon%>%
filter(type2 != "None")%>%
aggregate(cbind(type2) ~ generation, data = pokemon, FUN = function(x) length(unique(x)));type_per_gen
# Count primary types per generation
type_per_gen <-
pokemon%>%
filter(type2 != "None")%>%
aggregate(cbind(type2) ~ generation, FUN = function(x) length(unique(x)));type_per_gen
# Plot
ggplot(data = type_per_gen, aes(x = as.numeric(generation), y = type2)) +
geom_line() +
geom_point() +
labs(x = "Generation", y = "Unique Secondary Types", title = "Diversity of Primary Pokémon Types per Generation") +
theme_light()
avg_stats_per_gen <- aggregate(cbind(hp, attack, defense, sp_attack, sp_defense, speed) ~ generation, data = pokemon, mean)
# Melting the data for easier plotting
library(reshape2)
melted_data <- melt(avg_stats_per_gen, id.vars = "generation")
# Plot
ggplot(melted_data, aes(x = generation, y = value, color = variable)) +
geom_line() +
geom_point() +
labs(x = "Generation", y = "Average Stat Value", title = "Evolution of Average Stats per Generation") +
theme_minimal()
avg_stats_per_gen <- aggregate(cbind(hp, attack, defense, sp_attack, sp_defense, speed) ~ generation, data = pokemon, mean)
# Melting the data for easier plotting
library(reshape2)
melted_data <- melt(avg_stats_per_gen, id.vars = "generation")
# Plot
ggplot(melted_data, aes(x = generation, y = value, color = variable)) +
geom_line() +
geom_point() +
labs(x = "Generation", y = "Average Stat Value", title = "Evolution of Average Stats per Generation") +
facet_wrap(~ generation)+
theme_minimal()
avg_stats_per_gen <- aggregate(cbind(hp, attack, defense, sp_attack, sp_defense, speed) ~ generation, data = pokemon, mean)
# Melting the data for easier plotting
library(reshape2)
melted_data <- melt(avg_stats_per_gen, id.vars = "generation")
# Plot
ggplot(melted_data, aes(x = generation, y = value, color = variable)) +
geom_line() +
geom_point() +
labs(x = "Generation", y = "Average Stat Value", title = "Evolution of Average Stats per Generation") +
facet_wrap(~ variable)+
theme_minimal()
pokemon %>% naniar::miss_var_summary()
# Count legendary Pokémon per generation
legendary_per_gen <- aggregate(is_legendary ~ generation, data = pokemon, sum)
# Plot
ggplot(data = legendary_per_gen, aes(x = generation, y = is_legendary)) +
geom_bar(stat = "identity", fill = "gold") +
labs(x = "Generation", y = "Number of Legendary Pokémon", title = "Legendary Pokémon per Generation") +
theme_minimal()
legendary_per_gen
# Count unique abilities per generation
abilities_per_gen <- aggregate(cbind(abilities) ~ generation, data = pokemon, FUN = function(x) length(unique(x)))
# Plot
ggplot(data = abilities_per_gen, aes(x = generation, y = abilities)) +
geom_line() +
geom_point() +
labs(x = "Generation", y = "Unique Abilities", title = "Diversity of Abilities per Generation") +
theme_minimal()
abilities_per_gen
# Count unique abilities per generation
abilities_per_gen <- aggregate(cbind(abilities) ~ generation, data = pokemon, FUN = function(x) length(unique(x)))
# Plot
ggplot(data = abilities_per_gen, aes(x = generation, y = abilities)) +
geom_line() +
geom_point() +
labs(x = "Generation", y = "Unique Abilities", title = "Diversity of Abilities per Generation") +
theme_minimal()
pokemon%>%
filter(generation == 1)%>%
unique(pokemon$abilities)
pokemon%>%
filter(generation == '1')%>%
unique(pokemon$abilities)
pokemon%>%
filter(generation = 1)%>%
unique(pokemon$abilities)
pokemon%>%
filter(generation == 1)%>%
unique(pokemon$abilities)
# Count unique abilities per generation
abilities_per_gen <- aggregate(cbind(abilities) ~ generation, data = pokemon, FUN = function(x) length(unique(x)))
# Plot
ggplot(data = abilities_per_gen, aes(x = generation, y = abilities)) +
geom_line() +
geom_point() +
labs(x = "Generation", y = "Unique Abilities", title = "Diversity of Abilities per Generation") +
theme_minimal()
abilities_per_gen <- aggregate(cbind(abilities) ~ generation, data = pokemon, FUN = function(x) length(unique(x)))
abilities_per_gen
# Average capture rate per generation
capture_rate_per_gen <- aggregate(capture_rate ~ generation, data = pokemon_data, mean)
# Average capture rate per generation
capture_rate_per_gen <- aggregate(capture_rate ~ generation, data = pokemon, mean)
# Plot
ggplot(data = capture_rate_per_gen, aes(x = generation, y = capture_rate)) +
geom_line() +
geom_point() +
labs(x = "Generation", y = "Average Capture Rate", title = "Average Capture Rate per Generation") +
theme_minimal()
# Average capture rate per generation
capture_rate_per_gen <- aggregate(capture_rate ~ generation, data = pokemon, mean)
# Plot
pokemon%>%
filter(capture_rate, generation)%>%
group_by(generation)%>%
summarize(mean_cap_rate = mean(capture_rate))%>%
ggplot(aes(x = generation, y = mean_cap_rate)) +
geom_line() +
geom_point() +
labs(x = "Generation", y = "Average Capture Rate", title = "Average Capture Rate per Generation") +
theme_minimal()
# Average capture rate per generation
#capture_rate_per_gen <- aggregate(capture_rate ~ generation, data = pokemon, mean)
# Plot
pokemon%>%
filter(capture_rate, generation)%>%
group_by(as.factor(generation))%>%
summarize(mean_cap_rate = mean(capture_rate))%>%
ggplot(aes(x = generation, y = mean_cap_rate)) +
geom_line() +
geom_point() +
labs(x = "Generation", y = "Average Capture Rate", title = "Average Capture Rate per Generation") +
theme_minimal()
# Plot
pokemon%>%
select(capture_rate, generation)%>%
group_by(as.factor(generation))%>%
summarize(mean_cap_rate = mean(capture_rate))%>%
ggplot(aes(x = generation, y = mean_cap_rate)) +
geom_line() +
geom_point() +
labs(x = "Generation", y = "Average Capture Rate", title = "Average Capture Rate per Generation") +
theme_minimal()
# Plot
pokemon%>%
select(capture_rate, generation)%>%
group_by(as.factor(generation))%>%
summarize(mean_cap_rate = mean(capture_rate))%>%
ggplot(aes(x = as.factor(generation), y = mean_cap_rate)) +
geom_line() +
geom_point() +
labs(x = "Generation", y = "Average Capture Rate", title = "Average Capture Rate per Generation") +
theme_minimal()
# Plot
pokemon%>%
select(capture_rate, generation)%>%
group_by(generation)%>%
summarize(mean_cap_rate = mean(capture_rate))%>%
ggplot(aes(x = generation, y = mean_cap_rate)) +
geom_line() +
geom_point() +
labs(x = "Generation", y = "Average Capture Rate", title = "Average Capture Rate per Generation") +
theme_minimal()
# Plot
pokemon%>%
# select(capture_rate, generation)%>%
group_by(generation)%>%
summarize(mean_cap_rate = mean(capture_rate))%>%
ggplot(aes(x = generation, y = mean_cap_rate)) +
geom_line() +
geom_point() +
labs(x = "Generation", y = "Average Capture Rate", title = "Average Capture Rate per Generation") +
theme_minimal()
pokemon %>%
select(capture_rate, generation) %>%
group_by(generation) %>%
summarize(mean_cap_rate = mean(capture_rate, na.rm = TRUE)) %>% # Adding na.rm = TRUE to handle NA values
ggplot(aes(x = generation, y = mean_cap_rate)) +
geom_line() +
geom_point() +
labs(x = "Generation", y = "Average Capture Rate", title = "Average Capture Rate per Generation") +
theme_minimal()
capture_rate_per_gen <- aggregate(capture_rate ~ generation, data = pokemon, mean)
capture_rate_per_gen <- aggregate(capture_rate ~ as.factor(generation), data = pokemon, mean)
capture_rate_per_gen
capture_rate_per_gen <- aggregate(capture_rate ~ generation, data = pokemon, mean)
capture_rate_per_gen <- aggregate(as.numeric(capture_rate) ~ generation, data = pokemon, mean)
capture_rate_per_gen <- aggregate(as.numeric(as.factor(capture_rate)) ~ generation, data = pokemon, mean)
capture_rate_per_gen
pokemon%>%
group_by(generation)%>%
summarize(mean = mean(capture_rate))
ggplot(data = capture_rate_per_gen, aes(x = generation, y = capture_rate)) +
geom_line(color = "blue") +
geom_point(color = "red", size = 2) +
labs(x = "Generation", y = "Average Capture Rate", title = "Average Capture Rate Change Across Generations") +
theme_minimal()
capture_rate_per_gen <- aggregate(as.numeric(as.factor(capture_rate)) ~ generation, data = pokemon, mean)
ggplot(data = capture_rate_per_gen, aes(x = generation, y = as.numeric(as.factor(capture_rate)))) +
geom_line(color = "blue") +
geom_point(color = "red", size = 2) +
labs(x = "Generation", y = "Average Capture Rate", title = "Average Capture Rate Change Across Generations") +
theme_minimal()
pokemon_data$capture_rate <- as.numeric(as.character(pokemon_data$capture_rate))
pokemon$capture_rate <- as.numeric(as.character(pokemon$capture_rate))
capture_rate_per_gen <- aggregate(capture_rate ~ generation, data = pokemon, mean)
ggplot(data = capture_rate_per_gen, aes(x = generation, y = capture_rate)) +
geom_line(color = "blue") +
geom_point(color = "red", size = 2) +
labs(x = "Generation", y = "Average Capture Rate", title = "Average Capture Rate Change Across Generations") +
theme_minimal()
capture_rate_per_gen
pokemon%>%
group_by(generation)%>%
summarize(mean = mean(capture_rate))
legendary_per_gen
pokemon$capture_rate <- as.numeric(as.character(pokemon$capture_rate))
capture_rate_per_gen <- aggregate(capture_rate ~ generation, data = pokemon, mean)
ggplot(data = capture_rate_per_gen, aes(x = generation, y = capture_rate)) +
geom_line(color = "blue") +
geom_point(color = "red", size = 2) +
labs(x = "Generation", y = "Average Capture Rate", title = "Average Capture Rate Change Across Generations") +
theme_minimal()
pokemon$capture_rate <- as.numeric(as.character(pokemon$capture_rate))
capture_rate_per_gen
pokemon$capture_rate <- as.numeric(as.character(pokemon$capture_rate))
capture_rate_per_gen <- aggregate(capture_rate ~ generation, data = pokemon, mean)
ggplot(data = capture_rate_per_gen, aes(x = generation, y = capture_rate)) +
geom_line(color = "blue") +
geom_point(color = "red", size = 2) +
labs(x = "Generation", y = "Average Capture Rate", title = "Average Capture Rate Change Across Generations") +
theme_minimal()
class(pokemon$against_bug)
against_data <- pokemon%>%
select(starts_with("against"), generation);against_data
melted_against_data <- melt(against_data, id.vars = "generation", variable.name = "against_type", value.name = "damage_ratio")
melted_against_data
pokemon_long <- pokemon %>%
gather(key = "AgainstType", value = "Effectiveness", starts_with("against_"))
pokemon_long
pokemon_long <- pokemon %>%
gather(key = "AgainstType", value = "Effectiveness", starts_with("against_"))
# Convert generation to a factor for coloring
pokemon_long$generation <- as.factor(pokemon_long$generation)
# Plot using ggplot2, facet_wrap by AgainstType, and color by generation
ggplot(pokemon_long, aes(x = AgainstType, y = Effectiveness, fill = generation)) +
geom_bar(stat = "identity", position = position_dodge()) +
facet_wrap(~AgainstType, scales = "free_x") +
labs(title = "Effectiveness Against Each Type by Generation", x = "Type", y = "Effectiveness") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotate x labels for readability
pokemon_long <- pokemon %>%
gather(key = "AgainstType", value = "Effectiveness", starts_with("against_"))
# Convert generation to a factor for coloring
pokemon_long$generation <- as.factor(pokemon_long$generation)
# Plot using ggplot2, facet_wrap by AgainstType, and color by generation
ggplot(pokemon_long, aes(x = AgainstType, y = Effectiveness, fill = generation)) +
geom_bar(stat = "identity") +
facet_wrap(~AgainstType, scales = "free_x") +
labs(title = "Effectiveness Against Each Type by Generation", x = "Type", y = "Effectiveness") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotate x labels for readability
pokemon_long
pokemon_long <- pokemon %>%
gather(key = "AgainstType", value = "Effectiveness", starts_with("against_"))
# Convert generation to a factor for coloring
pokemon_long$generation <- as.factor(pokemon_long$generation)
# Plot using ggplot2, facet_wrap by AgainstType, and color by generation
ggplot(pokemon_long, aes(x = AgainstType, y = as.factor(Effectiveness), fill = generation)) +
geom_bar(stat = "identity") +
facet_wrap(~AgainstType, scales = "free_x") +
labs(title = "Effectiveness Against Each Type by Generation", x = "Type", y = "Effectiveness") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotate x labels for readability
against_columns <- grep("against_", names(pokemon), value = TRUE)
# Calculate the mean of 'against_' variables for each generation
avg_against_per_gen <- pokemon %>%
group_by(generation) %>%
summarise_at(vars(against_columns), mean, na.rm = TRUE) %>%
gather(key = "against_type", value = "mean_value", -generation)
# Plot
ggplot(avg_against_per_gen, aes(x = generation, y = mean_value, color = against_type)) +
geom_line() +
geom_point() +
labs(x = "Generation", y = "Average Against Value", title = "Average 'Against' Values per Generation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) + # To improve x-axis labels readability
scale_color_viridis_d() # Use a distinct color palette for better differentiation
# Plot
ggplot(avg_against_per_gen, aes(x = generation, y = mean_value, color = against_type)) +
geom_line() +
geom_point() +
labs(x = "Generation", y = "Average Against Value", title = "Average 'Against' Values per Generation") +
theme_minimal() +
facet_wrap(~ against_type)+
theme(axis.text.x = element_text(angle = 45, hjust = 1)) + # To improve x-axis labels readability
scale_color_viridis_d() # Use a distinct color palette for better differentiation
# Count legendary Pokémon per generation
legendary_per_gen <- aggregate(is_legendary ~ generation, data = pokemon, sum)
# Plot
ggplot(data = legendary_per_gen, aes(x = generation, y = is_legendary)) +
geom_bar(stat = "identity", fill = "gold") +
labs(x = "Generation", y = "Number of Legendary Pokémon", title = "Legendary Pokémon per Generation") +
theme_minimal()
pokemon$capture_rate <- as.numeric(as.character(pokemon$capture_rate))
capture_rate_per_gen <- aggregate(capture_rate ~ generation, data = pokemon, mean)
ggplot(data = capture_rate_per_gen, aes(x = generation, y = capture_rate)) +
geom_line(color = "blue") +
geom_point(color = "red", size = 2) +
labs(x = "Generation", y = "Average Capture Rate", title = "Average Capture Rate Change Across Generations") +
theme_minimal()
against_columns <- grep("against_", names(pokemon), value = TRUE)
# Calculate the mean of 'against_' variables for each generation
avg_against_per_gen <- pokemon %>%
group_by(generation) %>%
summarise_at(vars(against_columns), mean, na.rm = TRUE) %>%
gather(key = "against_type", value = "mean_value", -generation)
# Plot
ggplot(avg_against_per_gen, aes(x = generation, y = mean_value, color = against_type)) +
geom_line() +
geom_point() +
labs(x = "Generation", y = "Average Against Value", title = "Average 'Against' Values per Generation") +
theme_minimal() +
facet_wrap(~ against_type)+
theme(axis.text.x = element_text(angle = 45, hjust = 1)) + # To improve x-axis labels readability
scale_color_viridis_d() # Use a distinct color palette for better differentiation
glimpse(pokemon)
# Count legendary Pokémon per generation
legendary_per_gen <- aggregate(is_legendary ~ generation, data = pokemon, sum)
# Plot
ggplot(data = legendary_per_gen, aes(x = generation, y = is_legendary)) +
geom_bar(stat = "identity", fill = "gold") +
labs(x = "Generation", y = "Number of Legendary Pokémon", title = "Legendary Pokémon per Generation") +
theme_minimal()
library(shiny); runApp('Shiny App Compare.R')
library("tidyverse")
library("janitor")
library("naniar")
library("dplyr")
pokemon <- read_csv("pokemon.csv")
glimpse(pokemon)
library(shiny); runApp('Shiny App Compare.R')
