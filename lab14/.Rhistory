)
library(shiny)
ui <- fluidPage(
radioButtons("x", "Select Fill Variable", choices = c("trophic.guild", "thermoregulation"), selected = "trophic.guild"),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(data = homerange, aes_string(x = "locomotion", y = input$x))+
geom_bar(position = "dodge", alpha = 0.8, color = "black")+
labs(x =NULL, fill = "Fill Variable")+
theme_light(base_size =  18)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
radioButtons("x", "Select Fill Variable", choices = c("trophic.guild", "thermoregulation"), selected = "trophic.guild"),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(data = homerange, aes_string(x = "locomotion", y = input$x))+
geom_bar(position = "dodge", alpha = 0.8, color = "black")+
labs(x =NULL, fill = "Fill Variable")
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
radioButtons("x", "Select Fill Variable", choices = c("trophic.guild", "thermoregulation"), selected = "trophic.guild"),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(data = homerange, aes_string(x = "locomotion", fill = input$x))+
geom_bar(position = "dodge", alpha = 0.8, color = "black")+
labs(x =NULL, fill = "Fill Variable")
})
}
shinyApp(ui, server)
install.packages("shinydashboard")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(tidyverse)
library(shiny)
library(shinydashboard)
require(janitor)
library(palmerpenguins)
ui <- fluidPage(titlePanel("Homerange Locomotion"),
radioButtons("x", "Select Fill Variable",
choices=c("trophic.guild", "thermoregulation"),
selected="trophic.guild"),
plotOutput("plot", width="600px", height="500px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(homerange, aes_string(x="locomotion", fill=input$x)) +
geom_bar(position="dodge", alpha=0.8, color="black") +
theme_light(base_size=18) +
labs(x=NULL, y=NULL, fill="Fill Variable")
})
}
shinyApp(ui, server)
library("tidyverse")
runApp('shiny_practice.R')
runApp('shiny_practice.R')
homerange %>%
filter(taxon=="mammals") %>%
ggplot(aes(x=log10.hra))+
geom_density(fill="steelblue", color="black", alpha=0.6)
library(shiny)
ui <- fluidPage(
title = ("Log 10 Homerange by Taxon"),
selectInput('x',  "Select Taxon",
choices = c("birds", "lake fishes", "lizards", "mammals", "marine fishes", "river fishes",
"snakes", "tortoises", "turtles"), selected = "birds"),
plotOutput("plot", width = "600px", height = "500px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
homerange%>%
filter(taxon = input$x)%>%
ggplot(aes(x = log10.hra))+
geom_density(fill = "steelblue", color = "black", alpha = 0.8)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
titlePanel("Log 10 Homerange by Taxon"),
selectInput('x',  "Select Taxon",
choices = c("birds", "lake fishes", "lizards", "mammals", "marine fishes", "river fishes",
"snakes", "tortoises", "turtles"), selected = "birds"),
plotOutput("plot", width = "600px", height = "500px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
homerange%>%
filter(taxon = input$x)%>%
ggplot(aes(x = log10.hra))+
geom_density(fill = "steelblue", color = "black", alpha = 0.8)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
titlePanel("Log 10 Homerange by Taxon"),
selectInput('x',  "Select Taxon",
choices = c("birds", "lake fishes", "lizards", "mammals", "marine fishes", "river fishes",
"snakes", "tortoises", "turtles"), selected = "birds"),
plotOutput("plot", width = "600px", height = "500px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
homerange%>%
filter(taxon == input$x)%>%
ggplot(aes(x = log10.hra))+
geom_density(fill = "steelblue", color = "black", alpha = 0.8)
})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
sliderInput("pointsize", "Select the Point Size", min = 0.5, max = 3, value = 1, step = 0.5),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
ggplot(penguins, aes_string(x = input$x, y = input$y, color="species")) +
geom_point(size=input$pointsize) +
theme_light()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
server <- function(input, output) { }
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
sliderInput("pointsize", "Select the Point Size", min = 0.5, max = 3, value = 1, step = 0.5),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
ggplot(penguins, aes_string(x = input$x, y = input$y, color="species")) +
geom_point(size=input$pointsize) +
theme_light()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "penguins"),
dashboardSidebar(disable = T),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
sliderInput("pointsize", "Select the Point Size", min = 0.5, max = 3, value = 1, step = 0.5),
plotOutput("plot", width = "500px", height = "400px")
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
ggplot(penguins, aes_string(x = input$x, y = input$y, color="species")) +
geom_point(size=input$pointsize) +
theme_light()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_depth_mm"),
), # close the first box
box(
plotOutput("plot", width = "500px", height = "400px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
ggplot(data=penguins, aes_string(x = input$x, y = input$y, color="species")) +
geom_point() +
theme_light()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "penguins"),
dashboardSidebar(disable = T),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
sliderInput("pointsize", "Select the Point Size", min = 0.5, max = 3, value = 1, step = 0.5),
plotOutput("plot", width = "500px", height = "400px")
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
ggplot(penguins, aes_string(x = input$x, y = input$y, color="species")) +
geom_point(size=input$pointsize) +
theme_light()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_depth_mm"),
), # close the first box
box(title = "Plot of Penguins Data", width = 9,
plotOutput("plot", width = "800px", height = "600px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
ggplot(data=penguins, aes_string(x = input$x, y = input$y, color="species")) +
geom_point() +
theme_light()
})
}
shinyApp(ui, server)
ui <- fluidPage(
#shinythemes::themeSelector(),  # <--- Add this somewhere in the UI
theme = shinytheme("cerulean"),
titlePanel("Log 10 Homerange by Taxon"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Taxon of Interest:", choices=unique(homerange$taxon)), hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.")),
# create a spot for the barplot
mainPanel(
plotOutput("taxonPlot"))
)
)
wolves <- read_csv("data/wolves_data/wolves_dataset.csv")
wolves %>%
filter(sex!="NA") %>%
ggplot(aes(x=sex, fill=sex))+
geom_bar()+
facet_wrap(~pop)
ui <- fluidPage(
#shinythemes::themeSelector(),  # <--- Add this somewhere in the UI
theme = shinytheme("cerulean"),
titlePanel("Log 10 Homerange by Taxon"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Taxon of Interest:", choices=unique(homerange$taxon)), hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.")),
# create a spot for the barplot
mainPanel(
plotOutput("taxonPlot"))
)
)
View(wolves)
ui <- dashboardPage(
dashboardHeader(title =  "Sex Composition by Wolf Population"),
dashboardSidebar(diable = T),
dashboardBody(
fluidRow(
box(width = 3,
selectInput( 'x', ' Select Population', choice = unique(wolves$pop)), hr()),# close first box
box(width = 7,
plotOutput('plot', width = '600px', height = '400px')
)
)
)
)
server <- function(input, output) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
wolves %>%
filter(sex!="NA") %>%
filter(pop == input$x)
ggplot(aes(x=sex, fill=sex))+
geom_bar()+
facet_wrap(~pop)
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title =  "Sex Composition by Wolf Population"),
dashboardSidebar(diable = T),
dashboardBody(
fluidRow(
box(width = 3,
selectInput( 'x', ' Select Population', choice = unique(wolves$pop)), hr()),# close first box
box(width = 7,
plotOutput('plot', width = '600px', height = '400px')
)
)
)
)
server <- function(input, output) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
wolves %>%
filter(sex!="NA") %>%
filter(pop == input$x)
ggplot(aes(x=sex, fill=sex))+
geom_bar()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title =  "Sex Composition by Wolf Population"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(width = 3,
selectInput( 'x', ' Select Population', choice = unique(wolves$pop)), hr()),# close first box
box(width = 7,
plotOutput('plot', width = '600px', height = '400px')
)
)
)
)
server <- function(input, output) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
wolves %>%
filter(sex!="NA") %>%
filter(pop == input$x)
ggplot(aes(x=sex, fill=sex))+
geom_bar()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title =  "Sex Composition by Wolf Population"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(width = 3,
selectInput( 'x', ' Select Population', choice = unique(wolves$pop)), hr()),# close first box
box(width = 7,
plotOutput('plot', width = '600px', height = '400px')
)
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
wolves %>%
filter(sex!="NA") %>%
filter(pop == input$x)
ggplot(aes(x=sex, fill=sex))+
geom_bar()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title =  "Sex Composition by Wolf Population"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(width = 3,
selectInput( 'x', ' Select Population', choice = unique(wolves$pop)), hr()),# close first box
box(width = 7,
plotOutput('plot', width = '600px', height = '400px')
)
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
wolves %>%
filter(sex!="NA") %>%
filter(pop == input$x)
ggplot(aes(x=sex, fill=sex))+
geom_bar()
})
}
shinyApp(ui, server)
install.packages("shinythemes")
#install.packages("shinythemes")
library(shinythemes)
ui <- dashboardPage(
dashboardHeader(title =  "Sex Composition by Wolf Population"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(width = 3,
selectInput( 'x', ' Select Population', choice = unique(wolves$pop)), hr()),# close first box
box(width = 7,
plotOutput('plot', width = '600px', height = '400px')
)
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
wolves %>%
filter(sex!="NA") %>%
filter(pop == input$x)
ggplot(aes(x=sex, fill=sex))+
geom_bar()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title =  "Sex Composition by Wolf Population"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(width = 3,
selectInput( 'x', ' Select Population', choice = unique(wolves$pop)), hr()),# close first box
box(width = 7,
plotOutput('plot', width = '600px', height = '400px')
)
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
wolves %>%
filter(sex!="NA") %>%
filter(pop == input$x)
ggplot(aes_string(x=sex, fill=sex))+
geom_bar()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title =  "Sex Composition by Wolf Population"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(width = 3,
selectInput( 'x', ' Select Population', choices = unique(wolves$pop)), hr()),# close first box
box(width = 7,
plotOutput('plot', width = '600px', height = '400px')
)
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
wolves %>%
filter(sex!="NA") %>%
filter(pop == input$x)
ggplot(aes(x=sex, fill=sex))+
geom_bar()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title =  "Sex Composition by Wolf Population"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(width = 3,
selectInput( 'x', ' Select Population', choices = unique(wolves$pop)), hr()),# close first box
box(width = 7,
plotOutput('plot', width = '600px', height = '400px')
)
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
wolves %>%
filter(sex!="NA") %>%
filter(pop == input$x)%>%
ggplot(aes(x=sex, fill=sex))+
geom_bar()
})
}
shinyApp(ui, server)
